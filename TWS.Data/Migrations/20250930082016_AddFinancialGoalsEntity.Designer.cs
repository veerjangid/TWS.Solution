// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TWS.Data.Context;

#nullable disable

namespace TWS.Data.Migrations
{
    [DbContext(typeof(TWSDbContext))]
    [Migration("20250930082016_AddFinancialGoalsEntity")]
    partial class AddFinancialGoalsEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "771366f2-06f9-4510-b73e-560de6450ce6",
                            Name = "Investor",
                            NormalizedName = "INVESTOR"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "cf3eb510-cbcd-436e-a50d-84685178be20",
                            Name = "Advisor",
                            NormalizedName = "ADVISOR"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "d3738fef-0fa4-467b-bef0-451cd8b6c5af",
                            Name = "OperationsTeam",
                            NormalizedName = "OPERATIONSTEAM"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.Accreditation.AccreditationDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("InvestorAccreditationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UploadDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("DocumentType")
                        .HasDatabaseName("IX_AccreditationDocuments_DocumentType");

                    b.HasIndex("InvestorAccreditationId")
                        .HasDatabaseName("IX_AccreditationDocuments_InvestorAccreditationId");

                    b.ToTable("AccreditationDocuments", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.Accreditation.InvestorAccreditation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccreditationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("InvestorProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("StateLicenseHeld")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("VerificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("VerifiedByUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AccreditationType")
                        .HasDatabaseName("IX_InvestorAccreditations_AccreditationType");

                    b.HasIndex("InvestorProfileId")
                        .IsUnique()
                        .HasDatabaseName("IX_InvestorAccreditations_InvestorProfileId");

                    b.HasIndex("IsVerified")
                        .HasDatabaseName("IX_InvestorAccreditations_IsVerified");

                    b.HasIndex("VerifiedByUserId");

                    b.ToTable("InvestorAccreditations", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.Beneficiaries.Beneficiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("BeneficiaryType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstMiddleLastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("InvestorProfileId")
                        .HasColumnType("int");

                    b.Property<decimal>("PercentageOfBenefit")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("RelationshipToOwner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SocialSecurityNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("BeneficiaryType")
                        .HasDatabaseName("IX_Beneficiaries_BeneficiaryType");

                    b.HasIndex("InvestorProfileId")
                        .HasDatabaseName("IX_Beneficiaries_InvestorProfileId");

                    b.HasIndex("InvestorProfileId", "BeneficiaryType")
                        .HasDatabaseName("IX_Beneficiaries_InvestorProfileId_BeneficiaryType");

                    b.ToTable("Beneficiaries", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.Core.AccountRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsProcessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ProcessedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_AccountRequests_Email");

                    b.HasIndex("IsProcessed")
                        .HasDatabaseName("IX_AccountRequests_IsProcessed");

                    b.HasIndex("ProcessedByUserId");

                    b.HasIndex("RequestDate")
                        .HasDatabaseName("IX_AccountRequests_RequestDate");

                    b.ToTable("AccountRequests", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.Core.InvestorProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccreditationType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("InvestorType")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccredited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int>("ProfileCompletionPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("InvestorType")
                        .HasDatabaseName("IX_InvestorProfiles_InvestorType");

                    b.HasIndex("IsAccredited")
                        .HasDatabaseName("IX_InvestorProfiles_IsAccredited");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_InvestorProfiles_IsActive");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_InvestorProfiles_UserId_Unique");

                    b.ToTable("InvestorProfiles", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.Financial.FinancialGoals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<bool>("ConsistentCashFlow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("DeferTaxes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("Diversification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("EstateLegacyPlanning")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("GrowPrincipal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("InvestmentObjective")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("InvestmentTimeline")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("InvestorProfileId")
                        .HasColumnType("int");

                    b.Property<string>("LiquidityNeeds")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("ProtectPrincipal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("Retirement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("RiskTolerance")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InvestorProfileId")
                        .IsUnique()
                        .HasDatabaseName("IX_FinancialGoals_InvestorProfileId");

                    b.ToTable("FinancialGoals", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.Financial.PersonalFinancialStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("InvestorProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UploadDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("InvestorProfileId")
                        .IsUnique()
                        .HasDatabaseName("IX_PersonalFinancialStatements_InvestorProfileId");

                    b.ToTable("PersonalFinancialStatements", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.GeneralInfo.EntityEquityOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("EntityGeneralInfoId")
                        .HasColumnType("int")
                        .HasColumnName("EntityGeneralInfoId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("EntityGeneralInfoId")
                        .HasDatabaseName("IX_EntityEquityOwners_EntityGeneralInfoId");

                    b.ToTable("EntityEquityOwners", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.GeneralInfo.EntityGeneralInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CompanyName");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime>("DateOfFormation")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateOfFormation");

                    b.Property<int>("EntityInvestorDetailId")
                        .HasColumnType("int")
                        .HasColumnName("EntityInvestorDetailId");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EntityType");

                    b.Property<bool>("HasOperatingAgreement")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("HasOperatingAgreement");

                    b.Property<bool>("IsUSCompany")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsUSCompany");

                    b.Property<string>("PurposeOfFormation")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("PurposeOfFormation");

                    b.Property<string>("TINEIN")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TINEIN");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("EntityInvestorDetailId")
                        .IsUnique()
                        .HasDatabaseName("IX_EntityGeneralInfo_EntityInvestorDetailId");

                    b.HasIndex("EntityType")
                        .HasDatabaseName("IX_EntityGeneralInfo_EntityType");

                    b.ToTable("EntityGeneralInfo", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.GeneralInfo.IRAGeneralInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AccountType");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("CustodianFaxNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CustodianFaxNumber");

                    b.Property<string>("CustodianName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CustodianName");

                    b.Property<string>("CustodianPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CustodianPhoneNumber");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Email");

                    b.Property<bool>("HasLiquidatedAssets")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("HasLiquidatedAssets");

                    b.Property<string>("IRAAccountNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("IRAAccountNumber");

                    b.Property<int>("IRAInvestorDetailId")
                        .HasColumnType("int")
                        .HasColumnName("IRAInvestorDetailId");

                    b.Property<bool>("IsRollingOverToCNB")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsRollingOverToCNB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Phone");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SSN");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("AccountType")
                        .HasDatabaseName("IX_IRAGeneralInfo_AccountType");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_IRAGeneralInfo_Email");

                    b.HasIndex("IRAInvestorDetailId")
                        .IsUnique()
                        .HasDatabaseName("IX_IRAGeneralInfo_IRAInvestorDetailId");

                    b.ToTable("IRAGeneralInfo", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.GeneralInfo.IndividualGeneralInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("DriverLicensePath")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DriverLicensePath");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Email");

                    b.Property<int>("IndividualInvestorDetailId")
                        .HasColumnType("int")
                        .HasColumnName("IndividualInvestorDetailId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Phone");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SSN");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("W9Path")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("W9Path");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_IndividualGeneralInfo_Email");

                    b.HasIndex("IndividualInvestorDetailId")
                        .IsUnique()
                        .HasDatabaseName("IX_IndividualGeneralInfo_IndividualInvestorDetailId");

                    b.ToTable("IndividualGeneralInfo", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.GeneralInfo.JointAccountHolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Email");

                    b.Property<int>("JointGeneralInfoId")
                        .HasColumnType("int")
                        .HasColumnName("JointGeneralInfoId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Name");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int")
                        .HasColumnName("OrderIndex");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Phone");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SSN");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_JointAccountHolders_Email");

                    b.HasIndex("JointGeneralInfoId")
                        .HasDatabaseName("IX_JointAccountHolders_JointGeneralInfoId");

                    b.HasIndex("OrderIndex")
                        .HasDatabaseName("IX_JointAccountHolders_OrderIndex");

                    b.ToTable("JointAccountHolders", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.GeneralInfo.JointGeneralInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsJointInvestment")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsJointInvestment");

                    b.Property<string>("JointAccountType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("JointAccountType");

                    b.Property<int>("JointInvestorDetailId")
                        .HasColumnType("int")
                        .HasColumnName("JointInvestorDetailId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("JointInvestorDetailId")
                        .IsUnique()
                        .HasDatabaseName("IX_JointGeneralInfo_JointInvestorDetailId");

                    b.ToTable("JointGeneralInfo", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.GeneralInfo.TrustGeneralInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime>("DateOfFormation")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateOfFormation");

                    b.Property<bool>("IsUSTrust")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsUSTrust");

                    b.Property<string>("PurposeOfFormation")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("PurposeOfFormation");

                    b.Property<string>("TINEIN")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TINEIN");

                    b.Property<int>("TrustInvestorDetailId")
                        .HasColumnType("int")
                        .HasColumnName("TrustInvestorDetailId");

                    b.Property<string>("TrustName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TrustName");

                    b.Property<string>("TrustType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TrustType");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("TrustInvestorDetailId")
                        .IsUnique()
                        .HasDatabaseName("IX_TrustGeneralInfo_TrustInvestorDetailId");

                    b.HasIndex("TrustType")
                        .HasDatabaseName("IX_TrustGeneralInfo_TrustType");

                    b.ToTable("TrustGeneralInfo", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.GeneralInfo.TrustGrantor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Name");

                    b.Property<int>("TrustGeneralInfoId")
                        .HasColumnType("int")
                        .HasColumnName("TrustGeneralInfoId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("TrustGeneralInfoId")
                        .HasDatabaseName("IX_TrustGrantors_TrustGeneralInfoId");

                    b.ToTable("TrustGrantors", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("InvestorTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.Identity.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_RefreshTokens_ExpiresAt");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("IX_RefreshTokens_Token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_RefreshTokens_UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.PrimaryInvestorInfo.BrokerAffiliation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrokerDealerName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EmployeeName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsEmployeeOfBrokerDealer")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsManagerMemberExecutive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRelatedToEmployee")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSeniorOfficer")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PrimaryInvestorInfoId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedBrokerDealerName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Relationship")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryInvestorInfoId")
                        .HasDatabaseName("IX_BrokerAffiliations_PrimaryInvestorInfoId");

                    b.ToTable("BrokerAffiliations", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.PrimaryInvestorInfo.InvestmentExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssetClass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ExperienceLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OtherDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("PrimaryInvestorInfoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryInvestorInfoId")
                        .HasDatabaseName("IX_InvestmentExperiences_PrimaryInvestorInfoId");

                    b.HasIndex("PrimaryInvestorInfoId", "AssetClass")
                        .HasDatabaseName("IX_InvestmentExperiences_PrimaryInvestorInfoId_AssetClass");

                    b.ToTable("InvestmentExperiences", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.PrimaryInvestorInfo.PrimaryInvestorInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternateAddress")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal>("AnticipatedIncomeThisYear")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CellPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DriversLicenseExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DriversLicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("EmployerName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("HasAlternateAddress")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("InvestorProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMarried")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRelyingOnJointIncome")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LegalStreetAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal>("LowestIncomeLastTwoYears")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("RetiredProfession")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SocialSecurityNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_PrimaryInvestorInfos_Email");

                    b.HasIndex("InvestorProfileId")
                        .IsUnique()
                        .HasDatabaseName("IX_PrimaryInvestorInfos_InvestorProfileId");

                    b.HasIndex("LastName")
                        .HasDatabaseName("IX_PrimaryInvestorInfos_LastName");

                    b.ToTable("PrimaryInvestorInfos", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.PrimaryInvestorInfo.SourceOfFunds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("PrimaryInvestorInfoId")
                        .HasColumnType("int");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryInvestorInfoId")
                        .HasDatabaseName("IX_SourceOfFunds_PrimaryInvestorInfoId");

                    b.HasIndex("PrimaryInvestorInfoId", "SourceType")
                        .HasDatabaseName("IX_SourceOfFunds_PrimaryInvestorInfoId_SourceType");

                    b.ToTable("SourceOfFunds", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.PrimaryInvestorInfo.TaxRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("PrimaryInvestorInfoId")
                        .HasColumnType("int");

                    b.Property<string>("TaxRateRange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryInvestorInfoId")
                        .HasDatabaseName("IX_TaxRates_PrimaryInvestorInfoId");

                    b.HasIndex("PrimaryInvestorInfoId", "TaxRateRange")
                        .HasDatabaseName("IX_TaxRates_PrimaryInvestorInfoId_TaxRateRange");

                    b.ToTable("TaxRates", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.TypeSpecific.EntityInvestorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int>("InvestorProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsUSCompany")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EntityType")
                        .HasDatabaseName("IX_EntityInvestorDetails_EntityType");

                    b.HasIndex("InvestorProfileId")
                        .IsUnique()
                        .HasDatabaseName("IX_EntityInvestorDetails_InvestorProfileId_Unique");

                    b.ToTable("EntityInvestorDetails", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.TypeSpecific.IRAInvestorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IRAType")
                        .HasColumnType("int");

                    b.Property<int>("InvestorProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsUSCitizen")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NameOfIRA")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IRAType")
                        .HasDatabaseName("IX_IRAInvestorDetails_IRAType");

                    b.HasIndex("InvestorProfileId")
                        .IsUnique()
                        .HasDatabaseName("IX_IRAInvestorDetails_InvestorProfileId_Unique");

                    b.ToTable("IRAInvestorDetails", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.TypeSpecific.IndividualInvestorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("InvestorProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsUSCitizen")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InvestorProfileId")
                        .IsUnique()
                        .HasDatabaseName("IX_IndividualInvestorDetails_InvestorProfileId_Unique");

                    b.ToTable("IndividualInvestorDetails", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.TypeSpecific.JointInvestorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("InvestorProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsJointInvestment")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("JointAccountType")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("PrimaryIsUSCitizen")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PrimaryLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SecondaryFirstName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("SecondaryIsUSCitizen")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecondaryLastName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InvestorProfileId")
                        .IsUnique()
                        .HasDatabaseName("IX_JointInvestorDetails_InvestorProfileId_Unique");

                    b.HasIndex("JointAccountType")
                        .HasDatabaseName("IX_JointInvestorDetails_JointAccountType");

                    b.ToTable("JointInvestorDetails", (string)null);
                });

            modelBuilder.Entity("TWS.Data.Entities.TypeSpecific.TrustInvestorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("InvestorProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsUSTrust")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TrustName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("TrustType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InvestorProfileId")
                        .IsUnique()
                        .HasDatabaseName("IX_TrustInvestorDetails_InvestorProfileId_Unique");

                    b.HasIndex("TrustType")
                        .HasDatabaseName("IX_TrustInvestorDetails_TrustType");

                    b.ToTable("TrustInvestorDetails", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TWS.Data.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TWS.Data.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TWS.Data.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TWS.Data.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TWS.Data.Entities.Accreditation.AccreditationDocument", b =>
                {
                    b.HasOne("TWS.Data.Entities.Accreditation.InvestorAccreditation", "InvestorAccreditation")
                        .WithMany("AccreditationDocuments")
                        .HasForeignKey("InvestorAccreditationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AccreditationDocuments_InvestorAccreditations");

                    b.Navigation("InvestorAccreditation");
                });

            modelBuilder.Entity("TWS.Data.Entities.Accreditation.InvestorAccreditation", b =>
                {
                    b.HasOne("TWS.Data.Entities.Core.InvestorProfile", "InvestorProfile")
                        .WithOne()
                        .HasForeignKey("TWS.Data.Entities.Accreditation.InvestorAccreditation", "InvestorProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_InvestorAccreditations_InvestorProfiles");

                    b.HasOne("TWS.Data.Entities.Identity.ApplicationUser", "VerifiedByUser")
                        .WithMany()
                        .HasForeignKey("VerifiedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_InvestorAccreditations_ApplicationUsers");

                    b.Navigation("InvestorProfile");

                    b.Navigation("VerifiedByUser");
                });

            modelBuilder.Entity("TWS.Data.Entities.Beneficiaries.Beneficiary", b =>
                {
                    b.HasOne("TWS.Data.Entities.Core.InvestorProfile", "InvestorProfile")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("InvestorProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvestorProfile");
                });

            modelBuilder.Entity("TWS.Data.Entities.Core.AccountRequest", b =>
                {
                    b.HasOne("TWS.Data.Entities.Identity.ApplicationUser", "ProcessedByUser")
                        .WithMany()
                        .HasForeignKey("ProcessedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProcessedByUser");
                });

            modelBuilder.Entity("TWS.Data.Entities.Core.InvestorProfile", b =>
                {
                    b.HasOne("TWS.Data.Entities.Identity.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("TWS.Data.Entities.Core.InvestorProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TWS.Data.Entities.Financial.FinancialGoals", b =>
                {
                    b.HasOne("TWS.Data.Entities.Core.InvestorProfile", "InvestorProfile")
                        .WithOne()
                        .HasForeignKey("TWS.Data.Entities.Financial.FinancialGoals", "InvestorProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FinancialGoals_InvestorProfile");

                    b.Navigation("InvestorProfile");
                });

            modelBuilder.Entity("TWS.Data.Entities.Financial.PersonalFinancialStatement", b =>
                {
                    b.HasOne("TWS.Data.Entities.Core.InvestorProfile", "InvestorProfile")
                        .WithOne()
                        .HasForeignKey("TWS.Data.Entities.Financial.PersonalFinancialStatement", "InvestorProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PersonalFinancialStatements_InvestorProfile");

                    b.Navigation("InvestorProfile");
                });

            modelBuilder.Entity("TWS.Data.Entities.GeneralInfo.EntityEquityOwner", b =>
                {
                    b.HasOne("TWS.Data.Entities.GeneralInfo.EntityGeneralInfo", "EntityGeneralInfo")
                        .WithMany("EntityEquityOwners")
                        .HasForeignKey("EntityGeneralInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityGeneralInfo");
                });

            modelBuilder.Entity("TWS.Data.Entities.GeneralInfo.EntityGeneralInfo", b =>
                {
                    b.HasOne("TWS.Data.Entities.TypeSpecific.EntityInvestorDetail", "EntityInvestorDetail")
                        .WithOne()
                        .HasForeignKey("TWS.Data.Entities.GeneralInfo.EntityGeneralInfo", "EntityInvestorDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityInvestorDetail");
                });

            modelBuilder.Entity("TWS.Data.Entities.GeneralInfo.IRAGeneralInfo", b =>
                {
                    b.HasOne("TWS.Data.Entities.TypeSpecific.IRAInvestorDetail", "IRAInvestorDetail")
                        .WithOne()
                        .HasForeignKey("TWS.Data.Entities.GeneralInfo.IRAGeneralInfo", "IRAInvestorDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IRAInvestorDetail");
                });

            modelBuilder.Entity("TWS.Data.Entities.GeneralInfo.IndividualGeneralInfo", b =>
                {
                    b.HasOne("TWS.Data.Entities.TypeSpecific.IndividualInvestorDetail", "IndividualInvestorDetail")
                        .WithOne()
                        .HasForeignKey("TWS.Data.Entities.GeneralInfo.IndividualGeneralInfo", "IndividualInvestorDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IndividualInvestorDetail");
                });

            modelBuilder.Entity("TWS.Data.Entities.GeneralInfo.JointAccountHolder", b =>
                {
                    b.HasOne("TWS.Data.Entities.GeneralInfo.JointGeneralInfo", "JointGeneralInfo")
                        .WithMany("JointAccountHolders")
                        .HasForeignKey("JointGeneralInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JointGeneralInfo");
                });

            modelBuilder.Entity("TWS.Data.Entities.GeneralInfo.JointGeneralInfo", b =>
                {
                    b.HasOne("TWS.Data.Entities.TypeSpecific.JointInvestorDetail", "JointInvestorDetail")
                        .WithOne()
                        .HasForeignKey("TWS.Data.Entities.GeneralInfo.JointGeneralInfo", "JointInvestorDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JointInvestorDetail");
                });

            modelBuilder.Entity("TWS.Data.Entities.GeneralInfo.TrustGeneralInfo", b =>
                {
                    b.HasOne("TWS.Data.Entities.TypeSpecific.TrustInvestorDetail", "TrustInvestorDetail")
                        .WithOne()
                        .HasForeignKey("TWS.Data.Entities.GeneralInfo.TrustGeneralInfo", "TrustInvestorDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrustInvestorDetail");
                });

            modelBuilder.Entity("TWS.Data.Entities.GeneralInfo.TrustGrantor", b =>
                {
                    b.HasOne("TWS.Data.Entities.GeneralInfo.TrustGeneralInfo", "TrustGeneralInfo")
                        .WithMany("TrustGrantors")
                        .HasForeignKey("TrustGeneralInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrustGeneralInfo");
                });

            modelBuilder.Entity("TWS.Data.Entities.Identity.RefreshToken", b =>
                {
                    b.HasOne("TWS.Data.Entities.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TWS.Data.Entities.PrimaryInvestorInfo.BrokerAffiliation", b =>
                {
                    b.HasOne("TWS.Data.Entities.PrimaryInvestorInfo.PrimaryInvestorInfo", "PrimaryInvestorInfo")
                        .WithMany("BrokerAffiliations")
                        .HasForeignKey("PrimaryInvestorInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryInvestorInfo");
                });

            modelBuilder.Entity("TWS.Data.Entities.PrimaryInvestorInfo.InvestmentExperience", b =>
                {
                    b.HasOne("TWS.Data.Entities.PrimaryInvestorInfo.PrimaryInvestorInfo", "PrimaryInvestorInfo")
                        .WithMany("InvestmentExperiences")
                        .HasForeignKey("PrimaryInvestorInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryInvestorInfo");
                });

            modelBuilder.Entity("TWS.Data.Entities.PrimaryInvestorInfo.PrimaryInvestorInfo", b =>
                {
                    b.HasOne("TWS.Data.Entities.Core.InvestorProfile", "InvestorProfile")
                        .WithOne()
                        .HasForeignKey("TWS.Data.Entities.PrimaryInvestorInfo.PrimaryInvestorInfo", "InvestorProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvestorProfile");
                });

            modelBuilder.Entity("TWS.Data.Entities.PrimaryInvestorInfo.SourceOfFunds", b =>
                {
                    b.HasOne("TWS.Data.Entities.PrimaryInvestorInfo.PrimaryInvestorInfo", "PrimaryInvestorInfo")
                        .WithMany("SourceOfFunds")
                        .HasForeignKey("PrimaryInvestorInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryInvestorInfo");
                });

            modelBuilder.Entity("TWS.Data.Entities.PrimaryInvestorInfo.TaxRate", b =>
                {
                    b.HasOne("TWS.Data.Entities.PrimaryInvestorInfo.PrimaryInvestorInfo", "PrimaryInvestorInfo")
                        .WithMany("TaxRates")
                        .HasForeignKey("PrimaryInvestorInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryInvestorInfo");
                });

            modelBuilder.Entity("TWS.Data.Entities.TypeSpecific.EntityInvestorDetail", b =>
                {
                    b.HasOne("TWS.Data.Entities.Core.InvestorProfile", "InvestorProfile")
                        .WithOne("EntityProfile")
                        .HasForeignKey("TWS.Data.Entities.TypeSpecific.EntityInvestorDetail", "InvestorProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvestorProfile");
                });

            modelBuilder.Entity("TWS.Data.Entities.TypeSpecific.IRAInvestorDetail", b =>
                {
                    b.HasOne("TWS.Data.Entities.Core.InvestorProfile", "InvestorProfile")
                        .WithOne("IRAProfile")
                        .HasForeignKey("TWS.Data.Entities.TypeSpecific.IRAInvestorDetail", "InvestorProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvestorProfile");
                });

            modelBuilder.Entity("TWS.Data.Entities.TypeSpecific.IndividualInvestorDetail", b =>
                {
                    b.HasOne("TWS.Data.Entities.Core.InvestorProfile", "InvestorProfile")
                        .WithOne("IndividualProfile")
                        .HasForeignKey("TWS.Data.Entities.TypeSpecific.IndividualInvestorDetail", "InvestorProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvestorProfile");
                });

            modelBuilder.Entity("TWS.Data.Entities.TypeSpecific.JointInvestorDetail", b =>
                {
                    b.HasOne("TWS.Data.Entities.Core.InvestorProfile", "InvestorProfile")
                        .WithOne("JointProfile")
                        .HasForeignKey("TWS.Data.Entities.TypeSpecific.JointInvestorDetail", "InvestorProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvestorProfile");
                });

            modelBuilder.Entity("TWS.Data.Entities.TypeSpecific.TrustInvestorDetail", b =>
                {
                    b.HasOne("TWS.Data.Entities.Core.InvestorProfile", "InvestorProfile")
                        .WithOne("TrustProfile")
                        .HasForeignKey("TWS.Data.Entities.TypeSpecific.TrustInvestorDetail", "InvestorProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvestorProfile");
                });

            modelBuilder.Entity("TWS.Data.Entities.Accreditation.InvestorAccreditation", b =>
                {
                    b.Navigation("AccreditationDocuments");
                });

            modelBuilder.Entity("TWS.Data.Entities.Core.InvestorProfile", b =>
                {
                    b.Navigation("Beneficiaries");

                    b.Navigation("EntityProfile");

                    b.Navigation("IRAProfile");

                    b.Navigation("IndividualProfile");

                    b.Navigation("JointProfile");

                    b.Navigation("TrustProfile");
                });

            modelBuilder.Entity("TWS.Data.Entities.GeneralInfo.EntityGeneralInfo", b =>
                {
                    b.Navigation("EntityEquityOwners");
                });

            modelBuilder.Entity("TWS.Data.Entities.GeneralInfo.JointGeneralInfo", b =>
                {
                    b.Navigation("JointAccountHolders");
                });

            modelBuilder.Entity("TWS.Data.Entities.GeneralInfo.TrustGeneralInfo", b =>
                {
                    b.Navigation("TrustGrantors");
                });

            modelBuilder.Entity("TWS.Data.Entities.PrimaryInvestorInfo.PrimaryInvestorInfo", b =>
                {
                    b.Navigation("BrokerAffiliations");

                    b.Navigation("InvestmentExperiences");

                    b.Navigation("SourceOfFunds");

                    b.Navigation("TaxRates");
                });
#pragma warning restore 612, 618
        }
    }
}
